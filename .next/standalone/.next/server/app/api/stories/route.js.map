{"version":3,"file":"app/api/stories/route.js","mappings":"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","sources":["webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/./src/app/api/stories/route.ts","webpack://_N_E/./src/app/api/stories/route.ts?2fcd","webpack://_N_E/?2098"],"sourcesContent":["module.exports = require(\"node:async_hooks\");","module.exports = require(\"node:buffer\");","import { getRequestContext } from \"@cloudflare/next-on-pages\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { D1Database } from \"@cloudflare/workers-types\";\n\n// Define the structure of a Story with bias information\ninterface Story {\n  id: number;\n  representative_headline: string;\n  summary: string | null;\n  first_seen_date: string;\n  last_updated_date: string;\n  topic_tags: string | null;\n  bias_distribution: { [key: string]: number }; // e.g., {\"Gov/Official\": 2, \"Independent Local\": 5}\n  total_articles: number;\n}\n\n// Define the structure for bias coverage from the DB\ninterface BiasCoverage {\n  bias_classification: string;\n  article_count: number;\n}\n\nexport const runtime = \"edge\"; // Specify edge runtime\n\n// GET handler to fetch stories with bias distribution\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const limit = parseInt(searchParams.get(\"limit\") || \"20\", 10);\n    const offset = parseInt(searchParams.get(\"offset\") || \"0\", 10);\n\n    // Access the D1 database binding\n    const context = getRequestContext();\n    const DB = context.env.DB as D1Database;\n\n    if (!DB) {\n      return NextResponse.json({ error: \"Database binding not found\" }, { status: 500 });\n    }\n\n    // Fetch recent stories\n    const storiesQuery = `\n      SELECT id, representative_headline, summary, first_seen_date, last_updated_date, topic_tags\n      FROM stories\n      ORDER BY last_updated_date DESC\n      LIMIT ? OFFSET ?\n    `;\n    const storiesResult = await DB.prepare(storiesQuery).bind(limit, offset).all<{ id: number; representative_headline: string; summary: string | null; first_seen_date: string; last_updated_date: string; topic_tags: string | null; }>();\n\n    if (!storiesResult.results) {\n      return NextResponse.json({ stories: [] });\n    }\n\n    const stories: Story[] = [];\n    const storyIds = storiesResult.results.map(s => s.id);\n\n    if (storyIds.length === 0) {\n        return NextResponse.json({ stories: [] });\n    }\n\n    // Fetch bias coverage for these stories\n    // Using JSON_GROUP_OBJECT to aggregate bias counts per story directly in SQL\n    // Note: D1 supports JSON functions\n    const coverageQuery = `\n        SELECT \n            story_id, \n            JSON_GROUP_OBJECT(bias_classification, article_count) as bias_distribution,\n            SUM(article_count) as total_articles\n        FROM story_coverage\n        WHERE story_id IN (${storyIds.map(() => \":\").join(\", \")}) -- Use positional parameters\n        GROUP BY story_id\n    `;\n    \n    // Prepare positional parameters for the IN clause\n    const coverageParams = storyIds;\n\n    const coverageResult = await DB.prepare(coverageQuery).bind(...coverageParams).all<{ story_id: number; bias_distribution: string; total_articles: number; }>();\n\n    const coverageMap = new Map<number, { bias_distribution: { [key: string]: number }; total_articles: number }>();\n    if (coverageResult.results) {\n      coverageResult.results.forEach(row => {\n        try {\n            // Parse the JSON string from JSON_GROUP_OBJECT\n            const parsedDistribution = JSON.parse(row.bias_distribution);\n            coverageMap.set(row.story_id, { bias_distribution: parsedDistribution, total_articles: row.total_articles });\n        } catch (e) {\n            console.error(`Failed to parse bias distribution for story ${row.story_id}: ${row.bias_distribution}`, e);\n            coverageMap.set(row.story_id, { bias_distribution: {}, total_articles: row.total_articles });\n        }\n      });\n    }\n\n    // Combine story data with coverage data\n    for (const storyData of storiesResult.results) {\n      const coverage = coverageMap.get(storyData.id) || { bias_distribution: {}, total_articles: 0 };\n      stories.push({\n        ...storyData,\n        bias_distribution: coverage.bias_distribution,\n        total_articles: coverage.total_articles,\n      });\n    }\n\n    return NextResponse.json({ stories });\n\n  } catch (error) {\n    console.error(\"Error fetching stories:\", error);\n    // Type assertion for error handling\n    const errorMessage = error instanceof Error ? error.message : \"An unknown error occurred\";\n    return NextResponse.json({ error: \"Failed to fetch stories\", details: errorMessage }, { status: 500 });\n  }\n}\n\n","import { AppRouteRouteModule } from \"next/dist/server/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/server/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/server/lib/patch-fetch\";\nimport * as userland from \"/Users/mohamedkhalif/Documents/somanews/src/app/api/stories/route.ts\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/stories/route\",\n        pathname: \"/api/stories\",\n        filename: \"route\",\n        bundlePath: \"app/api/stories/route\"\n    },\n    resolvedPagePath: \"/Users/mohamedkhalif/Documents/somanews/src/app/api/stories/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return _patchFetch({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\nexport { routeModule, workAsyncStorage, workUnitAsyncStorage, serverHooks, patchFetch,  };\n\n//# sourceMappingURL=app-route.js.map","var _self___RSC_MANIFEST;\nimport { createServerModuleMap } from \"next/dist/server/app-render/action-utils\";\nimport { setReferenceManifestsSingleton } from \"next/dist/server/app-render/encryption-utils\";\nimport { EdgeRouteModuleWrapper } from \"next/dist/server/web/edge-route-module-wrapper\";\n// Import the userland code.\nimport * as module from \"next-app-loader?name=app%2Fapi%2Fstories%2Froute&page=%2Fapi%2Fstories%2Froute&pagePath=private-next-app-dir%2Fapi%2Fstories%2Froute.ts&appDir=%2FUsers%2Fmohamedkhalif%2FDocuments%2Fsomanews%2Fsrc%2Fapp&appPaths=%2Fapi%2Fstories%2Froute&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!private-next-app-dir/api/stories/route.ts?__next_edge_ssr_entry__\";\nconst nextConfig = {\"env\":{},\"webpack\":null,\"eslint\":{\"ignoreDuringBuilds\":true},\"typescript\":{\"ignoreBuildErrors\":true,\"tsconfigPath\":\"tsconfig.json\"},\"distDir\":\".next\",\"cleanDistDir\":true,\"assetPrefix\":\"\",\"cacheMaxMemorySize\":52428800,\"configOrigin\":\"next.config.ts\",\"useFileSystemPublicRoutes\":true,\"generateEtags\":true,\"pageExtensions\":[\"tsx\",\"ts\",\"jsx\",\"js\"],\"poweredByHeader\":true,\"compress\":true,\"images\":{\"deviceSizes\":[640,750,828,1080,1200,1920,2048,3840],\"imageSizes\":[16,32,48,64,96,128,256,384],\"path\":\"/_next/image\",\"loader\":\"default\",\"loaderFile\":\"\",\"domains\":[],\"disableStaticImages\":false,\"minimumCacheTTL\":60,\"formats\":[\"image/webp\"],\"dangerouslyAllowSVG\":false,\"contentSecurityPolicy\":\"script-src 'none'; frame-src 'none'; sandbox;\",\"contentDispositionType\":\"attachment\",\"remotePatterns\":[],\"unoptimized\":false},\"devIndicators\":{\"appIsrStatus\":true,\"buildActivity\":true,\"buildActivityPosition\":\"bottom-right\"},\"onDemandEntries\":{\"maxInactiveAge\":60000,\"pagesBufferLength\":5},\"amp\":{\"canonicalBase\":\"\"},\"basePath\":\"\",\"sassOptions\":{},\"trailingSlash\":false,\"i18n\":null,\"productionBrowserSourceMaps\":false,\"excludeDefaultMomentLocales\":true,\"serverRuntimeConfig\":{},\"publicRuntimeConfig\":{},\"reactProductionProfiling\":false,\"reactStrictMode\":null,\"reactMaxHeadersLength\":6000,\"httpAgentOptions\":{\"keepAlive\":true},\"logging\":{},\"expireTime\":31536000,\"staticPageGenerationTimeout\":60,\"output\":\"standalone\",\"modularizeImports\":{\"@mui/icons-material\":{\"transform\":\"@mui/icons-material/{{member}}\"},\"lodash\":{\"transform\":\"lodash/{{member}}\"}},\"outputFileTracingRoot\":\"/Users/mohamedkhalif/Documents/somanews\",\"experimental\":{\"cacheLife\":{\"default\":{\"stale\":300,\"revalidate\":900,\"expire\":4294967294},\"seconds\":{\"stale\":0,\"revalidate\":1,\"expire\":60},\"minutes\":{\"stale\":300,\"revalidate\":60,\"expire\":3600},\"hours\":{\"stale\":300,\"revalidate\":3600,\"expire\":86400},\"days\":{\"stale\":300,\"revalidate\":86400,\"expire\":604800},\"weeks\":{\"stale\":300,\"revalidate\":604800,\"expire\":2592000},\"max\":{\"stale\":300,\"revalidate\":2592000,\"expire\":4294967294}},\"cacheHandlers\":{},\"cssChunking\":true,\"multiZoneDraftMode\":false,\"appNavFailHandling\":false,\"prerenderEarlyExit\":true,\"serverMinification\":true,\"serverSourceMaps\":false,\"linkNoTouchStart\":false,\"caseSensitiveRoutes\":false,\"clientSegmentCache\":false,\"preloadEntriesOnStart\":true,\"clientRouterFilter\":true,\"clientRouterFilterRedirects\":false,\"fetchCacheKeyPrefix\":\"\",\"middlewarePrefetch\":\"flexible\",\"optimisticClientCache\":true,\"manualClientBasePath\":false,\"cpus\":7,\"memoryBasedWorkersCount\":false,\"imgOptConcurrency\":null,\"imgOptTimeoutInSeconds\":7,\"imgOptMaxInputPixels\":268402689,\"imgOptSequentialRead\":null,\"isrFlushToDisk\":true,\"workerThreads\":false,\"optimizeCss\":false,\"nextScriptWorkers\":false,\"scrollRestoration\":false,\"externalDir\":false,\"disableOptimizedLoading\":false,\"gzipSize\":true,\"craCompat\":false,\"esmExternals\":true,\"fullySpecified\":false,\"swcTraceProfiling\":false,\"forceSwcTransforms\":false,\"largePageDataBytes\":128000,\"turbo\":{\"root\":\"/Users/mohamedkhalif/Documents/somanews\"},\"typedRoutes\":false,\"typedEnv\":false,\"parallelServerCompiles\":false,\"parallelServerBuildTraces\":false,\"ppr\":false,\"authInterrupts\":false,\"reactOwnerStack\":false,\"webpackMemoryOptimizations\":false,\"optimizeServerReact\":true,\"useEarlyImport\":false,\"staleTimes\":{\"dynamic\":0,\"static\":300},\"serverComponentsHmrCache\":true,\"staticGenerationMaxConcurrency\":8,\"staticGenerationMinPagesPerWorker\":25,\"dynamicIO\":false,\"inlineCss\":false,\"optimizePackageImports\":[\"lucide-react\",\"date-fns\",\"lodash-es\",\"ramda\",\"antd\",\"react-bootstrap\",\"ahooks\",\"@ant-design/icons\",\"@headlessui/react\",\"@headlessui-float/react\",\"@heroicons/react/20/solid\",\"@heroicons/react/24/solid\",\"@heroicons/react/24/outline\",\"@visx/visx\",\"@tremor/react\",\"rxjs\",\"@mui/material\",\"@mui/icons-material\",\"recharts\",\"react-use\",\"effect\",\"@effect/schema\",\"@effect/platform\",\"@effect/platform-node\",\"@effect/platform-browser\",\"@effect/platform-bun\",\"@effect/sql\",\"@effect/sql-mssql\",\"@effect/sql-mysql2\",\"@effect/sql-pg\",\"@effect/sql-squlite-node\",\"@effect/sql-squlite-bun\",\"@effect/sql-squlite-wasm\",\"@effect/sql-squlite-react-native\",\"@effect/rpc\",\"@effect/rpc-http\",\"@effect/typeclass\",\"@effect/experimental\",\"@effect/opentelemetry\",\"@material-ui/core\",\"@material-ui/icons\",\"@tabler/icons-react\",\"mui-core\",\"react-icons/ai\",\"react-icons/bi\",\"react-icons/bs\",\"react-icons/cg\",\"react-icons/ci\",\"react-icons/di\",\"react-icons/fa\",\"react-icons/fa6\",\"react-icons/fc\",\"react-icons/fi\",\"react-icons/gi\",\"react-icons/go\",\"react-icons/gr\",\"react-icons/hi\",\"react-icons/hi2\",\"react-icons/im\",\"react-icons/io\",\"react-icons/io5\",\"react-icons/lia\",\"react-icons/lib\",\"react-icons/lu\",\"react-icons/md\",\"react-icons/pi\",\"react-icons/ri\",\"react-icons/rx\",\"react-icons/si\",\"react-icons/sl\",\"react-icons/tb\",\"react-icons/tfi\",\"react-icons/ti\",\"react-icons/vsc\",\"react-icons/wi\"]},\"bundlePagesRouterDependencies\":false,\"configFile\":\"/Users/mohamedkhalif/Documents/somanews/next.config.ts\",\"configFileName\":\"next.config.ts\"}\nconst maybeJSONParse = (str)=>str ? JSON.parse(str) : undefined;\nconst rscManifest = (_self___RSC_MANIFEST = self.__RSC_MANIFEST) == null ? void 0 : _self___RSC_MANIFEST[\"/api/stories/route\"];\nconst rscServerManifest = maybeJSONParse(self.__RSC_SERVER_MANIFEST);\nif (rscManifest && rscServerManifest) {\n    setReferenceManifestsSingleton({\n        page: \"/api/stories/route\",\n        clientReferenceManifest: rscManifest,\n        serverActionsManifest: rscServerManifest,\n        serverModuleMap: createServerModuleMap({\n            serverActionsManifest: rscServerManifest\n        })\n    });\n}\nexport const ComponentMod = module;\nexport default EdgeRouteModuleWrapper.wrap(module.routeModule, {\n    nextConfig\n});\n\n//# sourceMappingURL=edge-app-route.js.map"],"names":["runtime","GET","request","searchParams","URL","url","limit","parseInt","get","offset","DB","getRequestContext","env","NextResponse","json","error","status","storiesQuery","storiesResult","prepare","bind","all","results","stories","storyIds","map","s","id","length","coverageQuery","join","coverageResult","coverageMap","Map","storyData","forEach","row","parsedDistribution","JSON","parse","bias_distribution","set","story_id","total_articles","e","console","coverage","push","errorMessage","Error","message","details"],"sourceRoot":"","ignoreList":[]}