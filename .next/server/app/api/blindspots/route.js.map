{"version":3,"file":"app/api/blindspots/route.js","mappings":"qFAAA,4DCAA,oHGAA,mQFkBO,IAAMA,EAAU,OAAO,CAAC,cAGTC,EAAIC,CAAoB,EAC5C,GAAI,CAJgD,GAK5C,cAAEC,CAAY,CAAE,CAAG,IAAIC,IAAIF,EAAQG,GAAG,EACtCC,EAAQC,SAASJ,EAAaK,GAAG,CAAC,UAAY,KAAM,IACpDC,EAAYC,WAAWP,EAAaK,GAAG,CAAC,cAAgB,OAIxDG,CAJgE,CAGtDC,CAAAA,EAAAA,EAAAA,iBAAAA,CAAiBA,GACdC,GAAG,CAACF,EAAE,CAEzB,GAAI,CAACA,EACH,EADO,KACAG,EAAAA,EAAYA,CAACC,IAAI,CAAC,CAAEC,MAAO,4BAA6B,EAAG,CAAEC,OAAQ,GAAI,GAIlF,IAAMC,EAAe,CAAC;;;;;;;;;;;;;IAatB,CAAC,CAEKC,EAAgB,MAAMR,EAAGS,OAAO,CAACF,GAAcG,GAAG,GAWxD,GAAI,CAACF,EAAcG,OAAO,EAAqC,GAAG,CAApCH,EAAcG,OAAO,CAACC,MAAM,CACxD,OAAOT,EAAAA,EAAYA,CAACC,IAAI,CAAC,CAAES,WAAY,EAAE,GAI3C,IAAMC,EAAa,IAAIC,IAcvB,IAAK,IAAMC,KAAOR,EAAcG,OAAO,CAAE,CAClCG,EAAWG,GAAG,CAACD,EAAIE,EAAE,GAAG,EAChBC,GAAG,CAACH,EAAIE,EAAE,CAAE,CACrBE,MAAO,CACLF,GAAIF,EAAIE,EAAE,CACVG,wBAAyBL,EAAIK,uBAAuB,CACpDC,QAASN,EAAIM,OAAO,CACpBC,gBAAiBP,EAAIO,eAAe,CACpCC,kBAAmBR,EAAIQ,iBAAiB,CACxCC,WAAYT,EAAIS,UAAU,EAE5BC,SAAU,CAAC,EACXC,MAAO,CACT,GAGF,IAAMC,EAAYd,EAAWjB,GAAG,CAACmB,EAAIE,EAAE,EACvCU,EAAUF,QAAQ,CAACV,EAAIa,mBAAmB,CAAC,CAAGb,EAAIc,aAAa,CAC/DF,EAAUD,KAAK,EAAIX,EAAIc,aAAa,CAItC,IAAMjB,EAA+B,EAAE,CAEvC,IAAK,GAAM,CAACK,EAAIa,EAAK,GAAIjB,EAAWkB,OAAO,GAAI,CAE7C,GAAID,EAAKJ,KAAK,CAAG,EAAG,SAGpB,IAAIM,EAAe,GACfC,EAAgB,EAEpB,IAAK,GAAM,CAACC,EAAMC,EAAM,GAAIC,OAAOL,OAAO,CAACD,EAAKL,QAAQ,EAAG,EAC7CQ,IACVA,EAAgBE,EAChBH,EAAeE,GAKnB,EAP6B,EAOvBG,EAAqBJ,EAAgBH,EAAKJ,KAAK,CAGjDW,GAAsBxC,GACxBe,EAAW0B,IAAI,CAAC,CADmB,GAE9BR,EAAKX,KAAK,CACboB,kBAAmBT,EAAKL,QAAQ,CAChCe,eAAgBV,EAAKJ,KAAK,CAC1Be,cAAeT,EACfU,oBAAqBL,CACvB,EAEJ,CAGAzB,EAAW+B,IAAI,CAAC,CAACC,EAAGC,IAAMA,EAAEH,mBAAmB,CAAGE,EAAEF,mBAAmB,EACvE,IAAMI,EAAoBlC,EAAWmC,KAAK,CAAC,EAAGrD,GAE9C,OAAOQ,EAAAA,EAAYA,CAACC,IAAI,CAAC,CAAES,WAAYkC,CAAkB,EAE3D,CAAE,MAAO1C,EAAO,CACd4C,QAAQ5C,KAAK,CAAC,6BAA8BA,GAC5C,IAAM6C,EAAe7C,aAAiB8C,MAAQ9C,EAAM+C,OAAO,CAAG,4BAC9D,OAAOjD,EAAAA,EAAYA,CAACC,IAAI,CAAC,CAAEC,MAAO,6BAA8BgD,QAASH,CAAa,EAAG,CAAE5C,OAAQ,GAAI,EACzG,CACF,CC3IA,UAAwB,qBAAmB,EAC3C,YACA,KAAc,GAAS,WACvB,6BACA,2BACA,iBACA,qCACA,CAAK,CACL,2FACA,iBAVA,aAWA,QAAY,EACZ,CAAC,EAID,kBAAQ,wCAAsD,EAC9D,aACA,MAAW,QAAW,EACtB,mBACA,sBACA,CAAK,CACL,CCpBA,sEACA,EAFA,4BAEA,4BACA,MACI,QAA8B,EAClC,6BACA,0BACA,wBACA,gBAAyB,OAAqB,EAC9C,uBACA,CAAS,CACT,CAAK,EAEE,MAAqB,EAC5B,EAAe,GAAsB,MAAM,EAAkB,CAC7D,QAD6D,GAf7D,CAAoB,MAAQ,OAcM,EAdN,aAA0B,sBAA0B,aAAe,kDAAwD,uOAAsQ,2RAAuT,kBAAkB,QAAQ,uEAAgF,gBAAkB,sEAAgF,kBAAoB,uCAA6C,MAAQ,iBAAmB,2BAA+B,gHAAkI,uBAAyB,8FAA0G,aAAiB,WAAa,0FAAmG,uBAAuB,iCAAmC,QAAQ,EAAE,SAAW,oBAAsB,QAAQ,GAAG,+EAAmF,WAAa,SAAW,2CAAiD,UAAY,+BAAqC,UAAY,oCAA0C,QAAU,uCAA6C,OAAS,yCAA+C,QAAU,0CAAiD,MAAQ,+CAAsD,iBAAmB,wwBAA85B,+CAAiD,kNAAqQ,qBAAyB,s+CAA0/C,sIAiBtvJ,CAAC,CAAC,EAAC","sources":["webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/./src/app/api/blindspots/route.ts","webpack://_N_E/./src/app/api/blindspots/route.ts?0101","webpack://_N_E/?3829"],"sourcesContent":["module.exports = require(\"node:async_hooks\");","module.exports = require(\"node:buffer\");","import { getRequestContext } from \"@cloudflare/next-on-pages\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { D1Database } from \"@cloudflare/workers-types\";\n\n// Define the structure of a Blindspot story\ninterface BlindspotStory {\n  id: number;\n  representative_headline: string;\n  summary: string | null;\n  first_seen_date: string;\n  last_updated_date: string;\n  topic_tags: string | null;\n  bias_distribution: { [key: string]: number };\n  total_articles: number;\n  dominant_bias: string;\n  dominant_percentage: number;\n}\n\nexport const runtime = \"edge\"; // Specify edge runtime\n\n// GET handler to fetch blindspot stories\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const limit = parseInt(searchParams.get(\"limit\") || \"10\", 10);\n    const threshold = parseFloat(searchParams.get(\"threshold\") || \"0.7\"); // 70% threshold for blindspot detection\n\n    // Access the D1 database binding\n    const context = getRequestContext();\n    const DB = context.env.DB as D1Database;\n\n    if (!DB) {\n      return NextResponse.json({ error: \"Database binding not found\" }, { status: 500 });\n    }\n\n    // First, get all stories with their coverage data\n    const storiesQuery = `\n      SELECT \n        s.id, \n        s.representative_headline, \n        s.summary, \n        s.first_seen_date, \n        s.last_updated_date, \n        s.topic_tags,\n        sc.bias_classification,\n        sc.article_count\n      FROM stories s\n      JOIN story_coverage sc ON s.id = sc.story_id\n      ORDER BY s.last_updated_date DESC\n    `;\n    \n    const storiesResult = await DB.prepare(storiesQuery).all<{\n      id: number;\n      representative_headline: string;\n      summary: string | null;\n      first_seen_date: string;\n      last_updated_date: string;\n      topic_tags: string | null;\n      bias_classification: string;\n      article_count: number;\n    }>();\n\n    if (!storiesResult.results || storiesResult.results.length === 0) {\n      return NextResponse.json({ blindspots: [] });\n    }\n\n    // Process the results to identify blindspots\n    const storiesMap = new Map<number, {\n      story: {\n        id: number;\n        representative_headline: string;\n        summary: string | null;\n        first_seen_date: string;\n        last_updated_date: string;\n        topic_tags: string | null;\n      },\n      coverage: { [key: string]: number },\n      total: number\n    }>();\n\n    // Group by story and calculate totals\n    for (const row of storiesResult.results) {\n      if (!storiesMap.has(row.id)) {\n        storiesMap.set(row.id, {\n          story: {\n            id: row.id,\n            representative_headline: row.representative_headline,\n            summary: row.summary,\n            first_seen_date: row.first_seen_date,\n            last_updated_date: row.last_updated_date,\n            topic_tags: row.topic_tags\n          },\n          coverage: {},\n          total: 0\n        });\n      }\n      \n      const storyData = storiesMap.get(row.id)!;\n      storyData.coverage[row.bias_classification] = row.article_count;\n      storyData.total += row.article_count;\n    }\n\n    // Identify blindspots\n    const blindspots: BlindspotStory[] = [];\n    \n    for (const [id, data] of storiesMap.entries()) {\n      // Skip stories with too few articles\n      if (data.total < 3) continue;\n      \n      // Find the dominant bias category\n      let dominantBias = \"\";\n      let dominantCount = 0;\n      \n      for (const [bias, count] of Object.entries(data.coverage)) {\n        if (count > dominantCount) {\n          dominantCount = count;\n          dominantBias = bias;\n        }\n      }\n      \n      // Calculate the percentage of the dominant bias\n      const dominantPercentage = dominantCount / data.total;\n      \n      // If the dominant bias exceeds our threshold, it's a blindspot\n      if (dominantPercentage >= threshold) {\n        blindspots.push({\n          ...data.story,\n          bias_distribution: data.coverage,\n          total_articles: data.total,\n          dominant_bias: dominantBias,\n          dominant_percentage: dominantPercentage\n        });\n      }\n    }\n    \n    // Sort by dominant percentage (most skewed first) and limit results\n    blindspots.sort((a, b) => b.dominant_percentage - a.dominant_percentage);\n    const limitedBlindspots = blindspots.slice(0, limit);\n\n    return NextResponse.json({ blindspots: limitedBlindspots });\n\n  } catch (error) {\n    console.error(\"Error fetching blindspots:\", error);\n    const errorMessage = error instanceof Error ? error.message : \"An unknown error occurred\";\n    return NextResponse.json({ error: \"Failed to fetch blindspots\", details: errorMessage }, { status: 500 });\n  }\n}\n","import { AppRouteRouteModule } from \"next/dist/server/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/server/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/server/lib/patch-fetch\";\nimport * as userland from \"/Users/mohamedkhalif/Documents/somanews/src/app/api/blindspots/route.ts\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/blindspots/route\",\n        pathname: \"/api/blindspots\",\n        filename: \"route\",\n        bundlePath: \"app/api/blindspots/route\"\n    },\n    resolvedPagePath: \"/Users/mohamedkhalif/Documents/somanews/src/app/api/blindspots/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return _patchFetch({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\nexport { routeModule, workAsyncStorage, workUnitAsyncStorage, serverHooks, patchFetch,  };\n\n//# sourceMappingURL=app-route.js.map","var _self___RSC_MANIFEST;\nimport { createServerModuleMap } from \"next/dist/server/app-render/action-utils\";\nimport { setReferenceManifestsSingleton } from \"next/dist/server/app-render/encryption-utils\";\nimport { EdgeRouteModuleWrapper } from \"next/dist/server/web/edge-route-module-wrapper\";\n// Import the userland code.\nimport * as module from \"next-app-loader?name=app%2Fapi%2Fblindspots%2Froute&page=%2Fapi%2Fblindspots%2Froute&pagePath=private-next-app-dir%2Fapi%2Fblindspots%2Froute.ts&appDir=%2FUsers%2Fmohamedkhalif%2FDocuments%2Fsomanews%2Fsrc%2Fapp&appPaths=%2Fapi%2Fblindspots%2Froute&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!private-next-app-dir/api/blindspots/route.ts?__next_edge_ssr_entry__\";\nconst nextConfig = {\"env\":{},\"webpack\":null,\"eslint\":{\"ignoreDuringBuilds\":true},\"typescript\":{\"ignoreBuildErrors\":true,\"tsconfigPath\":\"tsconfig.json\"},\"distDir\":\".next\",\"cleanDistDir\":true,\"assetPrefix\":\"\",\"cacheMaxMemorySize\":52428800,\"configOrigin\":\"next.config.ts\",\"useFileSystemPublicRoutes\":true,\"generateEtags\":true,\"pageExtensions\":[\"tsx\",\"ts\",\"jsx\",\"js\"],\"poweredByHeader\":true,\"compress\":true,\"images\":{\"deviceSizes\":[640,750,828,1080,1200,1920,2048,3840],\"imageSizes\":[16,32,48,64,96,128,256,384],\"path\":\"/_next/image\",\"loader\":\"default\",\"loaderFile\":\"\",\"domains\":[],\"disableStaticImages\":false,\"minimumCacheTTL\":60,\"formats\":[\"image/webp\"],\"dangerouslyAllowSVG\":false,\"contentSecurityPolicy\":\"script-src 'none'; frame-src 'none'; sandbox;\",\"contentDispositionType\":\"attachment\",\"remotePatterns\":[],\"unoptimized\":false},\"devIndicators\":{\"appIsrStatus\":true,\"buildActivity\":true,\"buildActivityPosition\":\"bottom-right\"},\"onDemandEntries\":{\"maxInactiveAge\":60000,\"pagesBufferLength\":5},\"amp\":{\"canonicalBase\":\"\"},\"basePath\":\"\",\"sassOptions\":{},\"trailingSlash\":false,\"i18n\":null,\"productionBrowserSourceMaps\":false,\"excludeDefaultMomentLocales\":true,\"serverRuntimeConfig\":{},\"publicRuntimeConfig\":{},\"reactProductionProfiling\":false,\"reactStrictMode\":null,\"reactMaxHeadersLength\":6000,\"httpAgentOptions\":{\"keepAlive\":true},\"logging\":{},\"expireTime\":31536000,\"staticPageGenerationTimeout\":60,\"output\":\"standalone\",\"modularizeImports\":{\"@mui/icons-material\":{\"transform\":\"@mui/icons-material/{{member}}\"},\"lodash\":{\"transform\":\"lodash/{{member}}\"}},\"outputFileTracingRoot\":\"/Users/mohamedkhalif/Documents/somanews\",\"experimental\":{\"cacheLife\":{\"default\":{\"stale\":300,\"revalidate\":900,\"expire\":4294967294},\"seconds\":{\"stale\":0,\"revalidate\":1,\"expire\":60},\"minutes\":{\"stale\":300,\"revalidate\":60,\"expire\":3600},\"hours\":{\"stale\":300,\"revalidate\":3600,\"expire\":86400},\"days\":{\"stale\":300,\"revalidate\":86400,\"expire\":604800},\"weeks\":{\"stale\":300,\"revalidate\":604800,\"expire\":2592000},\"max\":{\"stale\":300,\"revalidate\":2592000,\"expire\":4294967294}},\"cacheHandlers\":{},\"cssChunking\":true,\"multiZoneDraftMode\":false,\"appNavFailHandling\":false,\"prerenderEarlyExit\":true,\"serverMinification\":true,\"serverSourceMaps\":false,\"linkNoTouchStart\":false,\"caseSensitiveRoutes\":false,\"clientSegmentCache\":false,\"preloadEntriesOnStart\":true,\"clientRouterFilter\":true,\"clientRouterFilterRedirects\":false,\"fetchCacheKeyPrefix\":\"\",\"middlewarePrefetch\":\"flexible\",\"optimisticClientCache\":true,\"manualClientBasePath\":false,\"cpus\":7,\"memoryBasedWorkersCount\":false,\"imgOptConcurrency\":null,\"imgOptTimeoutInSeconds\":7,\"imgOptMaxInputPixels\":268402689,\"imgOptSequentialRead\":null,\"isrFlushToDisk\":true,\"workerThreads\":false,\"optimizeCss\":false,\"nextScriptWorkers\":false,\"scrollRestoration\":false,\"externalDir\":false,\"disableOptimizedLoading\":false,\"gzipSize\":true,\"craCompat\":false,\"esmExternals\":true,\"fullySpecified\":false,\"swcTraceProfiling\":false,\"forceSwcTransforms\":false,\"largePageDataBytes\":128000,\"turbo\":{\"root\":\"/Users/mohamedkhalif/Documents/somanews\"},\"typedRoutes\":false,\"typedEnv\":false,\"parallelServerCompiles\":false,\"parallelServerBuildTraces\":false,\"ppr\":false,\"authInterrupts\":false,\"reactOwnerStack\":false,\"webpackMemoryOptimizations\":false,\"optimizeServerReact\":true,\"useEarlyImport\":false,\"staleTimes\":{\"dynamic\":0,\"static\":300},\"serverComponentsHmrCache\":true,\"staticGenerationMaxConcurrency\":8,\"staticGenerationMinPagesPerWorker\":25,\"dynamicIO\":false,\"inlineCss\":false,\"optimizePackageImports\":[\"lucide-react\",\"date-fns\",\"lodash-es\",\"ramda\",\"antd\",\"react-bootstrap\",\"ahooks\",\"@ant-design/icons\",\"@headlessui/react\",\"@headlessui-float/react\",\"@heroicons/react/20/solid\",\"@heroicons/react/24/solid\",\"@heroicons/react/24/outline\",\"@visx/visx\",\"@tremor/react\",\"rxjs\",\"@mui/material\",\"@mui/icons-material\",\"recharts\",\"react-use\",\"effect\",\"@effect/schema\",\"@effect/platform\",\"@effect/platform-node\",\"@effect/platform-browser\",\"@effect/platform-bun\",\"@effect/sql\",\"@effect/sql-mssql\",\"@effect/sql-mysql2\",\"@effect/sql-pg\",\"@effect/sql-squlite-node\",\"@effect/sql-squlite-bun\",\"@effect/sql-squlite-wasm\",\"@effect/sql-squlite-react-native\",\"@effect/rpc\",\"@effect/rpc-http\",\"@effect/typeclass\",\"@effect/experimental\",\"@effect/opentelemetry\",\"@material-ui/core\",\"@material-ui/icons\",\"@tabler/icons-react\",\"mui-core\",\"react-icons/ai\",\"react-icons/bi\",\"react-icons/bs\",\"react-icons/cg\",\"react-icons/ci\",\"react-icons/di\",\"react-icons/fa\",\"react-icons/fa6\",\"react-icons/fc\",\"react-icons/fi\",\"react-icons/gi\",\"react-icons/go\",\"react-icons/gr\",\"react-icons/hi\",\"react-icons/hi2\",\"react-icons/im\",\"react-icons/io\",\"react-icons/io5\",\"react-icons/lia\",\"react-icons/lib\",\"react-icons/lu\",\"react-icons/md\",\"react-icons/pi\",\"react-icons/ri\",\"react-icons/rx\",\"react-icons/si\",\"react-icons/sl\",\"react-icons/tb\",\"react-icons/tfi\",\"react-icons/ti\",\"react-icons/vsc\",\"react-icons/wi\"]},\"bundlePagesRouterDependencies\":false,\"configFile\":\"/Users/mohamedkhalif/Documents/somanews/next.config.ts\",\"configFileName\":\"next.config.ts\"}\nconst maybeJSONParse = (str)=>str ? JSON.parse(str) : undefined;\nconst rscManifest = (_self___RSC_MANIFEST = self.__RSC_MANIFEST) == null ? void 0 : _self___RSC_MANIFEST[\"/api/blindspots/route\"];\nconst rscServerManifest = maybeJSONParse(self.__RSC_SERVER_MANIFEST);\nif (rscManifest && rscServerManifest) {\n    setReferenceManifestsSingleton({\n        page: \"/api/blindspots/route\",\n        clientReferenceManifest: rscManifest,\n        serverActionsManifest: rscServerManifest,\n        serverModuleMap: createServerModuleMap({\n            serverActionsManifest: rscServerManifest\n        })\n    });\n}\nexport const ComponentMod = module;\nexport default EdgeRouteModuleWrapper.wrap(module.routeModule, {\n    nextConfig\n});\n\n//# sourceMappingURL=edge-app-route.js.map"],"names":["runtime","GET","request","searchParams","URL","url","limit","parseInt","get","threshold","parseFloat","DB","getRequestContext","env","NextResponse","json","error","status","storiesQuery","storiesResult","prepare","all","results","length","blindspots","storiesMap","Map","row","has","id","set","story","representative_headline","summary","first_seen_date","last_updated_date","topic_tags","coverage","total","storyData","bias_classification","article_count","data","entries","dominantBias","dominantCount","bias","count","Object","dominantPercentage","push","bias_distribution","total_articles","dominant_bias","dominant_percentage","sort","a","b","limitedBlindspots","slice","console","errorMessage","Error","message","details"],"sourceRoot":"","ignoreList":[]}