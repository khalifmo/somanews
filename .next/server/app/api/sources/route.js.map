{"version":3,"file":"app/api/sources/route.js","mappings":"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","sources":["webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/./src/app/api/sources/route.ts","webpack://_N_E/./src/app/api/sources/route.ts?5c3f","webpack://_N_E/?18f5","webpack://_N_E/","webpack://_N_E/?5b17"],"sourcesContent":["module.exports = require(\"node:async_hooks\");","module.exports = require(\"node:buffer\");","import { getRequestContext } from \"@cloudflare/next-on-pages\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { D1Database } from \"@cloudflare/workers-types\";\n\n// Define the structure of a Source with bias information\ninterface Source {\n  id: number;\n  name: string;\n  url: string;\n  rss_url: string | null;\n  bias_classification: string;\n  logo_url: string | null;\n  last_checked: string | null;\n}\n\nexport const runtime = \"edge\"; // Specify edge runtime\n\n// GET handler to fetch sources with their bias classification\nexport async function GET(request: NextRequest) {\n  try {\n    // Access the D1 database binding\n    const context = getRequestContext();\n    const DB = context.env.DB as D1Database;\n\n    if (!DB) {\n      return NextResponse.json({ error: \"Database binding not found\" }, { status: 500 });\n    }\n\n    // Fetch all sources with their bias classification\n    const sourcesQuery = `\n      SELECT id, name, url, rss_url, bias_classification, logo_url, last_checked\n      FROM sources\n      ORDER BY name ASC\n    `;\n    const sourcesResult = await DB.prepare(sourcesQuery).all<Source>();\n\n    if (!sourcesResult.results) {\n      return NextResponse.json({ sources: [] });\n    }\n\n    // Get bias distribution statistics\n    const biasStatsQuery = `\n      SELECT \n        bias_classification, \n        COUNT(DISTINCT id) as source_count,\n        SUM(CASE WHEN rss_url IS NOT NULL THEN 1 ELSE 0 END) as rss_count\n      FROM sources\n      GROUP BY bias_classification\n      ORDER BY source_count DESC\n    `;\n    const biasStatsResult = await DB.prepare(biasStatsQuery).all<{ \n      bias_classification: string; \n      source_count: number;\n      rss_count: number;\n    }>();\n\n    return NextResponse.json({ \n      sources: sourcesResult.results,\n      bias_stats: biasStatsResult.results || []\n    });\n\n  } catch (error) {\n    console.error(\"Error fetching sources:\", error);\n    // Type assertion for error handling\n    const errorMessage = error instanceof Error ? error.message : \"An unknown error occurred\";\n    return NextResponse.json({ error: \"Failed to fetch sources\", details: errorMessage }, { status: 500 });\n  }\n}\n\n// POST handler to add a new source or update an existing one\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { name, url, rss_url, bias_classification, logo_url } = body;\n\n    // Basic validation\n    if (!name || !url || !bias_classification) {\n      return NextResponse.json({ error: \"Missing required fields\" }, { status: 400 });\n    }\n\n    // Access the D1 database binding\n    const context = getRequestContext();\n    const DB = context.env.DB as D1Database;\n\n    if (!DB) {\n      return NextResponse.json({ error: \"Database binding not found\" }, { status: 500 });\n    }\n\n    // Check if source already exists\n    const existingSource = await DB.prepare(\"SELECT id FROM sources WHERE url = ?\").bind(url).first<{ id: number }>();\n\n    let sourceId;\n    if (existingSource) {\n      // Update existing source\n      const updateQuery = `\n        UPDATE sources\n        SET name = ?, rss_url = ?, bias_classification = ?, logo_url = ?\n        WHERE id = ?\n      `;\n      await DB.prepare(updateQuery).bind(name, rss_url || null, bias_classification, logo_url || null, existingSource.id).run();\n      sourceId = existingSource.id;\n    } else {\n      // Insert new source\n      const insertQuery = `\n        INSERT INTO sources (name, url, rss_url, bias_classification, logo_url, last_checked)\n        VALUES (?, ?, ?, ?, ?, NULL)\n      `;\n      const result = await DB.prepare(insertQuery).bind(name, url, rss_url || null, bias_classification, logo_url || null).run();\n      sourceId = result.meta?.last_row_id;\n    }\n\n    return NextResponse.json({ \n      success: true, \n      message: existingSource ? \"Source updated\" : \"Source added\", \n      sourceId \n    });\n\n  } catch (error) {\n    console.error(\"Error adding/updating source:\", error);\n    const errorMessage = error instanceof Error ? error.message : \"An unknown error occurred\";\n    return NextResponse.json({ error: \"Failed to add/update source\", details: errorMessage }, { status: 500 });\n  }\n}\n","import { AppRouteRouteModule } from \"next/dist/server/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/server/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/server/lib/patch-fetch\";\nimport * as userland from \"/Users/mohamedkhalif/Documents/somanews/src/app/api/sources/route.ts\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/sources/route\",\n        pathname: \"/api/sources\",\n        filename: \"route\",\n        bundlePath: \"app/api/sources/route\"\n    },\n    resolvedPagePath: \"/Users/mohamedkhalif/Documents/somanews/src/app/api/sources/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return _patchFetch({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\nexport { routeModule, workAsyncStorage, workUnitAsyncStorage, serverHooks, patchFetch,  };\n\n//# sourceMappingURL=app-route.js.map","var _self___RSC_MANIFEST;\nimport { createServerModuleMap } from \"next/dist/server/app-render/action-utils\";\nimport { setReferenceManifestsSingleton } from \"next/dist/server/app-render/encryption-utils\";\nimport { EdgeRouteModuleWrapper } from \"next/dist/server/web/edge-route-module-wrapper\";\n// Import the userland code.\nimport * as module from \"next-app-loader?name=app%2Fapi%2Fsources%2Froute&page=%2Fapi%2Fsources%2Froute&pagePath=private-next-app-dir%2Fapi%2Fsources%2Froute.ts&appDir=%2FUsers%2Fmohamedkhalif%2FDocuments%2Fsomanews%2Fsrc%2Fapp&appPaths=%2Fapi%2Fsources%2Froute&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!private-next-app-dir/api/sources/route.ts?__next_edge_ssr_entry__\";\nconst nextConfig = {\"env\":{},\"webpack\":null,\"eslint\":{\"ignoreDuringBuilds\":true},\"typescript\":{\"ignoreBuildErrors\":true,\"tsconfigPath\":\"tsconfig.json\"},\"distDir\":\".next\",\"cleanDistDir\":true,\"assetPrefix\":\"\",\"cacheMaxMemorySize\":52428800,\"configOrigin\":\"next.config.ts\",\"useFileSystemPublicRoutes\":true,\"generateEtags\":true,\"pageExtensions\":[\"tsx\",\"ts\",\"jsx\",\"js\"],\"poweredByHeader\":true,\"compress\":true,\"images\":{\"deviceSizes\":[640,750,828,1080,1200,1920,2048,3840],\"imageSizes\":[16,32,48,64,96,128,256,384],\"path\":\"/_next/image\",\"loader\":\"default\",\"loaderFile\":\"\",\"domains\":[],\"disableStaticImages\":false,\"minimumCacheTTL\":60,\"formats\":[\"image/webp\"],\"dangerouslyAllowSVG\":false,\"contentSecurityPolicy\":\"script-src 'none'; frame-src 'none'; sandbox;\",\"contentDispositionType\":\"attachment\",\"remotePatterns\":[],\"unoptimized\":false},\"devIndicators\":{\"appIsrStatus\":true,\"buildActivity\":true,\"buildActivityPosition\":\"bottom-right\"},\"onDemandEntries\":{\"maxInactiveAge\":60000,\"pagesBufferLength\":5},\"amp\":{\"canonicalBase\":\"\"},\"basePath\":\"\",\"sassOptions\":{},\"trailingSlash\":false,\"i18n\":null,\"productionBrowserSourceMaps\":false,\"excludeDefaultMomentLocales\":true,\"serverRuntimeConfig\":{},\"publicRuntimeConfig\":{},\"reactProductionProfiling\":false,\"reactStrictMode\":null,\"reactMaxHeadersLength\":6000,\"httpAgentOptions\":{\"keepAlive\":true},\"logging\":{},\"expireTime\":31536000,\"staticPageGenerationTimeout\":60,\"output\":\"standalone\",\"modularizeImports\":{\"@mui/icons-material\":{\"transform\":\"@mui/icons-material/{{member}}\"},\"lodash\":{\"transform\":\"lodash/{{member}}\"}},\"outputFileTracingRoot\":\"/Users/mohamedkhalif/Documents/somanews\",\"experimental\":{\"cacheLife\":{\"default\":{\"stale\":300,\"revalidate\":900,\"expire\":4294967294},\"seconds\":{\"stale\":0,\"revalidate\":1,\"expire\":60},\"minutes\":{\"stale\":300,\"revalidate\":60,\"expire\":3600},\"hours\":{\"stale\":300,\"revalidate\":3600,\"expire\":86400},\"days\":{\"stale\":300,\"revalidate\":86400,\"expire\":604800},\"weeks\":{\"stale\":300,\"revalidate\":604800,\"expire\":2592000},\"max\":{\"stale\":300,\"revalidate\":2592000,\"expire\":4294967294}},\"cacheHandlers\":{},\"cssChunking\":true,\"multiZoneDraftMode\":false,\"appNavFailHandling\":false,\"prerenderEarlyExit\":true,\"serverMinification\":true,\"serverSourceMaps\":false,\"linkNoTouchStart\":false,\"caseSensitiveRoutes\":false,\"clientSegmentCache\":false,\"preloadEntriesOnStart\":true,\"clientRouterFilter\":true,\"clientRouterFilterRedirects\":false,\"fetchCacheKeyPrefix\":\"\",\"middlewarePrefetch\":\"flexible\",\"optimisticClientCache\":true,\"manualClientBasePath\":false,\"cpus\":7,\"memoryBasedWorkersCount\":false,\"imgOptConcurrency\":null,\"imgOptTimeoutInSeconds\":7,\"imgOptMaxInputPixels\":268402689,\"imgOptSequentialRead\":null,\"isrFlushToDisk\":true,\"workerThreads\":false,\"optimizeCss\":false,\"nextScriptWorkers\":false,\"scrollRestoration\":false,\"externalDir\":false,\"disableOptimizedLoading\":false,\"gzipSize\":true,\"craCompat\":false,\"esmExternals\":true,\"fullySpecified\":false,\"swcTraceProfiling\":false,\"forceSwcTransforms\":false,\"largePageDataBytes\":128000,\"turbo\":{\"root\":\"/Users/mohamedkhalif/Documents/somanews\"},\"typedRoutes\":false,\"typedEnv\":false,\"parallelServerCompiles\":false,\"parallelServerBuildTraces\":false,\"ppr\":false,\"authInterrupts\":false,\"reactOwnerStack\":false,\"webpackMemoryOptimizations\":false,\"optimizeServerReact\":true,\"useEarlyImport\":false,\"staleTimes\":{\"dynamic\":0,\"static\":300},\"serverComponentsHmrCache\":true,\"staticGenerationMaxConcurrency\":8,\"staticGenerationMinPagesPerWorker\":25,\"dynamicIO\":false,\"inlineCss\":false,\"optimizePackageImports\":[\"lucide-react\",\"date-fns\",\"lodash-es\",\"ramda\",\"antd\",\"react-bootstrap\",\"ahooks\",\"@ant-design/icons\",\"@headlessui/react\",\"@headlessui-float/react\",\"@heroicons/react/20/solid\",\"@heroicons/react/24/solid\",\"@heroicons/react/24/outline\",\"@visx/visx\",\"@tremor/react\",\"rxjs\",\"@mui/material\",\"@mui/icons-material\",\"recharts\",\"react-use\",\"effect\",\"@effect/schema\",\"@effect/platform\",\"@effect/platform-node\",\"@effect/platform-browser\",\"@effect/platform-bun\",\"@effect/sql\",\"@effect/sql-mssql\",\"@effect/sql-mysql2\",\"@effect/sql-pg\",\"@effect/sql-squlite-node\",\"@effect/sql-squlite-bun\",\"@effect/sql-squlite-wasm\",\"@effect/sql-squlite-react-native\",\"@effect/rpc\",\"@effect/rpc-http\",\"@effect/typeclass\",\"@effect/experimental\",\"@effect/opentelemetry\",\"@material-ui/core\",\"@material-ui/icons\",\"@tabler/icons-react\",\"mui-core\",\"react-icons/ai\",\"react-icons/bi\",\"react-icons/bs\",\"react-icons/cg\",\"react-icons/ci\",\"react-icons/di\",\"react-icons/fa\",\"react-icons/fa6\",\"react-icons/fc\",\"react-icons/fi\",\"react-icons/gi\",\"react-icons/go\",\"react-icons/gr\",\"react-icons/hi\",\"react-icons/hi2\",\"react-icons/im\",\"react-icons/io\",\"react-icons/io5\",\"react-icons/lia\",\"react-icons/lib\",\"react-icons/lu\",\"react-icons/md\",\"react-icons/pi\",\"react-icons/ri\",\"react-icons/rx\",\"react-icons/si\",\"react-icons/sl\",\"react-icons/tb\",\"react-icons/tfi\",\"react-icons/ti\",\"react-icons/vsc\",\"react-icons/wi\"]},\"bundlePagesRouterDependencies\":false,\"configFile\":\"/Users/mohamedkhalif/Documents/somanews/next.config.ts\",\"configFileName\":\"next.config.ts\"}\nconst maybeJSONParse = (str)=>str ? JSON.parse(str) : undefined;\nconst rscManifest = (_self___RSC_MANIFEST = self.__RSC_MANIFEST) == null ? void 0 : _self___RSC_MANIFEST[\"/api/sources/route\"];\nconst rscServerManifest = maybeJSONParse(self.__RSC_SERVER_MANIFEST);\nif (rscManifest && rscServerManifest) {\n    setReferenceManifestsSingleton({\n        page: \"/api/sources/route\",\n        clientReferenceManifest: rscManifest,\n        serverActionsManifest: rscServerManifest,\n        serverModuleMap: createServerModuleMap({\n            serverActionsManifest: rscServerManifest\n        })\n    });\n}\nexport const ComponentMod = module;\nexport default EdgeRouteModuleWrapper.wrap(module.routeModule, {\n    nextConfig\n});\n\n//# sourceMappingURL=edge-app-route.js.map"],"names":["runtime","GET","request","DB","getRequestContext","env","NextResponse","json","error","status","sourcesQuery","sourcesResult","prepare","all","results","sources","biasStatsQuery","biasStatsResult","bias_stats","console","errorMessage","Error","message","details","POST","sourceId","name","url","rss_url","bias_classification","logo_url","body","existingSource","bind","first","updateQuery","id","run","insertQuery","result","meta","last_row_id","success"],"sourceRoot":"","ignoreList":[]}